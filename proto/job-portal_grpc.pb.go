// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/job-portal.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobPortalServiceClient is the client API for JobPortalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobPortalServiceClient interface {
	// admin specific rpc
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	RegisterCompany(ctx context.Context, in *RegisterCompanyRequest, opts ...grpc.CallOption) (*RegisterCompanyResponse, error)
	DeleteCompany(ctx context.Context, in *DeleteCompanyRequest, opts ...grpc.CallOption) (*DeleteCompanyResponse, error)
	// fetching company data: called by companies and users
	UpdateCompanyData(ctx context.Context, in *UpdateCompanyDataRequest, opts ...grpc.CallOption) (*UpdatecompanyDataResponse, error)
	CreateNewJob(ctx context.Context, in *CreateNewJobRequest, opts ...grpc.CallOption) (*CreateNewJobResponse, error)
	// to fetch job categories: companies while creating jobs, users while searching for jobs
	// if no available category is apt then create new job category
	CreateNewJobCategory(ctx context.Context, in *CreateNewJobCategoryRequest, opts ...grpc.CallOption) (*CreateNewJobCategoryResponse, error)
	UpdateJobData(ctx context.Context, in *UpdateJobDataRequest, opts ...grpc.CallOption) (*UpdateJobDataResponse, error)
	// fetch jobs of specific category by one company - filter by company and category
	DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*DeleteJobResponse, error)
	FetchApplicantsByJobID(ctx context.Context, in *FetchApplicantsByJobIDRequest, opts ...grpc.CallOption) (*FetchApplicantsByJobIDResponse, error)
	// companies shortlisting/rejecting candidates
	ModifyApplicantApplication(ctx context.Context, in *ModifyApplicantApplicationRequest, opts ...grpc.CallOption) (*ModifyApplicantApplicationResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
	// fetching user data: can be called by companies while processing candidates, users for check/update profile
	UpdateUserData(ctx context.Context, in *UpdateUserDataRequest, opts ...grpc.CallOption) (*UpdateUserDataResponse, error)
	// fetch jobs of specific category by one company - filter by company and category
	UserJobApplication(ctx context.Context, in *UserJobApplicationRequest, opts ...grpc.CallOption) (*UserJobApplicationResponse, error)
	CheckAppliedJobs(ctx context.Context, in *CheckAppliedJobsRequest, opts ...grpc.CallOption) (*CheckAppliedJobsResponse, error)
	UserSavedJob(ctx context.Context, in *UserSavedJobRequest, opts ...grpc.CallOption) (*UserSavedJobResponse, error)
	UserCheckSavedJobs(ctx context.Context, in *UserCheckSavedJobsRequest, opts ...grpc.CallOption) (*UserCheckSavedJobsResponse, error)
	UserRemoveSavedJob(ctx context.Context, in *UserRemoveSavedJobRequest, opts ...grpc.CallOption) (*UserRemoveSavedJobResponse, error)
	FetchCompanyData(ctx context.Context, in *FetchCompanyDataRequest, opts ...grpc.CallOption) (*FetchCompanyDataResponse, error)
	FetchUserData(ctx context.Context, in *FetchUserDataRequest, opts ...grpc.CallOption) (*FetchUserDataResponse, error)
	FetchJobCategories(ctx context.Context, in *FetchJobCategoriesRequest, opts ...grpc.CallOption) (*FetchJobCategoriesResponse, error)
	FetchAllJobs(ctx context.Context, in *NoParams, opts ...grpc.CallOption) (*FetchAllJobsResponse, error)
	FetchJobsByCompanyID(ctx context.Context, in *FetchJobsByCompanyIDRequest, opts ...grpc.CallOption) (*FetchJobsByCompanyIDResponse, error)
	FetchJobsByCategoryID(ctx context.Context, in *FetchJobsByCategoryIDRequest, opts ...grpc.CallOption) (*FetchJobsByCategoryIDResponse, error)
	FetchCompanyJobsByCategory(ctx context.Context, in *FetchCompanyJobsByCategoryRequest, opts ...grpc.CallOption) (*FetchCompanyJobsByCategoryResponse, error)
	FetchJobData(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error)
}

type jobPortalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobPortalServiceClient(cc grpc.ClientConnInterface) JobPortalServiceClient {
	return &jobPortalServiceClient{cc}
}

func (c *jobPortalServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/proto.JobPortalService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobPortalServiceClient) RegisterCompany(ctx context.Context, in *RegisterCompanyRequest, opts ...grpc.CallOption) (*RegisterCompanyResponse, error) {
	out := new(RegisterCompanyResponse)
	err := c.cc.Invoke(ctx, "/proto.JobPortalService/RegisterCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobPortalServiceClient) DeleteCompany(ctx context.Context, in *DeleteCompanyRequest, opts ...grpc.CallOption) (*DeleteCompanyResponse, error) {
	out := new(DeleteCompanyResponse)
	err := c.cc.Invoke(ctx, "/proto.JobPortalService/DeleteCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobPortalServiceClient) UpdateCompanyData(ctx context.Context, in *UpdateCompanyDataRequest, opts ...grpc.CallOption) (*UpdatecompanyDataResponse, error) {
	out := new(UpdatecompanyDataResponse)
	err := c.cc.Invoke(ctx, "/proto.JobPortalService/UpdateCompanyData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobPortalServiceClient) CreateNewJob(ctx context.Context, in *CreateNewJobRequest, opts ...grpc.CallOption) (*CreateNewJobResponse, error) {
	out := new(CreateNewJobResponse)
	err := c.cc.Invoke(ctx, "/proto.JobPortalService/CreateNewJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobPortalServiceClient) CreateNewJobCategory(ctx context.Context, in *CreateNewJobCategoryRequest, opts ...grpc.CallOption) (*CreateNewJobCategoryResponse, error) {
	out := new(CreateNewJobCategoryResponse)
	err := c.cc.Invoke(ctx, "/proto.JobPortalService/CreateNewJobCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobPortalServiceClient) UpdateJobData(ctx context.Context, in *UpdateJobDataRequest, opts ...grpc.CallOption) (*UpdateJobDataResponse, error) {
	out := new(UpdateJobDataResponse)
	err := c.cc.Invoke(ctx, "/proto.JobPortalService/UpdateJobData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobPortalServiceClient) DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*DeleteJobResponse, error) {
	out := new(DeleteJobResponse)
	err := c.cc.Invoke(ctx, "/proto.JobPortalService/DeleteJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobPortalServiceClient) FetchApplicantsByJobID(ctx context.Context, in *FetchApplicantsByJobIDRequest, opts ...grpc.CallOption) (*FetchApplicantsByJobIDResponse, error) {
	out := new(FetchApplicantsByJobIDResponse)
	err := c.cc.Invoke(ctx, "/proto.JobPortalService/FetchApplicantsByJobID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobPortalServiceClient) ModifyApplicantApplication(ctx context.Context, in *ModifyApplicantApplicationRequest, opts ...grpc.CallOption) (*ModifyApplicantApplicationResponse, error) {
	out := new(ModifyApplicantApplicationResponse)
	err := c.cc.Invoke(ctx, "/proto.JobPortalService/ModifyApplicantApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobPortalServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, "/proto.JobPortalService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobPortalServiceClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, "/proto.JobPortalService/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobPortalServiceClient) UpdateUserData(ctx context.Context, in *UpdateUserDataRequest, opts ...grpc.CallOption) (*UpdateUserDataResponse, error) {
	out := new(UpdateUserDataResponse)
	err := c.cc.Invoke(ctx, "/proto.JobPortalService/UpdateUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobPortalServiceClient) UserJobApplication(ctx context.Context, in *UserJobApplicationRequest, opts ...grpc.CallOption) (*UserJobApplicationResponse, error) {
	out := new(UserJobApplicationResponse)
	err := c.cc.Invoke(ctx, "/proto.JobPortalService/UserJobApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobPortalServiceClient) CheckAppliedJobs(ctx context.Context, in *CheckAppliedJobsRequest, opts ...grpc.CallOption) (*CheckAppliedJobsResponse, error) {
	out := new(CheckAppliedJobsResponse)
	err := c.cc.Invoke(ctx, "/proto.JobPortalService/CheckAppliedJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobPortalServiceClient) UserSavedJob(ctx context.Context, in *UserSavedJobRequest, opts ...grpc.CallOption) (*UserSavedJobResponse, error) {
	out := new(UserSavedJobResponse)
	err := c.cc.Invoke(ctx, "/proto.JobPortalService/UserSavedJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobPortalServiceClient) UserCheckSavedJobs(ctx context.Context, in *UserCheckSavedJobsRequest, opts ...grpc.CallOption) (*UserCheckSavedJobsResponse, error) {
	out := new(UserCheckSavedJobsResponse)
	err := c.cc.Invoke(ctx, "/proto.JobPortalService/UserCheckSavedJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobPortalServiceClient) UserRemoveSavedJob(ctx context.Context, in *UserRemoveSavedJobRequest, opts ...grpc.CallOption) (*UserRemoveSavedJobResponse, error) {
	out := new(UserRemoveSavedJobResponse)
	err := c.cc.Invoke(ctx, "/proto.JobPortalService/UserRemoveSavedJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobPortalServiceClient) FetchCompanyData(ctx context.Context, in *FetchCompanyDataRequest, opts ...grpc.CallOption) (*FetchCompanyDataResponse, error) {
	out := new(FetchCompanyDataResponse)
	err := c.cc.Invoke(ctx, "/proto.JobPortalService/FetchCompanyData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobPortalServiceClient) FetchUserData(ctx context.Context, in *FetchUserDataRequest, opts ...grpc.CallOption) (*FetchUserDataResponse, error) {
	out := new(FetchUserDataResponse)
	err := c.cc.Invoke(ctx, "/proto.JobPortalService/FetchUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobPortalServiceClient) FetchJobCategories(ctx context.Context, in *FetchJobCategoriesRequest, opts ...grpc.CallOption) (*FetchJobCategoriesResponse, error) {
	out := new(FetchJobCategoriesResponse)
	err := c.cc.Invoke(ctx, "/proto.JobPortalService/FetchJobCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobPortalServiceClient) FetchAllJobs(ctx context.Context, in *NoParams, opts ...grpc.CallOption) (*FetchAllJobsResponse, error) {
	out := new(FetchAllJobsResponse)
	err := c.cc.Invoke(ctx, "/proto.JobPortalService/FetchAllJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobPortalServiceClient) FetchJobsByCompanyID(ctx context.Context, in *FetchJobsByCompanyIDRequest, opts ...grpc.CallOption) (*FetchJobsByCompanyIDResponse, error) {
	out := new(FetchJobsByCompanyIDResponse)
	err := c.cc.Invoke(ctx, "/proto.JobPortalService/FetchJobsByCompanyID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobPortalServiceClient) FetchJobsByCategoryID(ctx context.Context, in *FetchJobsByCategoryIDRequest, opts ...grpc.CallOption) (*FetchJobsByCategoryIDResponse, error) {
	out := new(FetchJobsByCategoryIDResponse)
	err := c.cc.Invoke(ctx, "/proto.JobPortalService/FetchJobsByCategoryID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobPortalServiceClient) FetchCompanyJobsByCategory(ctx context.Context, in *FetchCompanyJobsByCategoryRequest, opts ...grpc.CallOption) (*FetchCompanyJobsByCategoryResponse, error) {
	out := new(FetchCompanyJobsByCategoryResponse)
	err := c.cc.Invoke(ctx, "/proto.JobPortalService/FetchCompanyJobsByCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobPortalServiceClient) FetchJobData(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/proto.JobPortalService/FetchJobData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobPortalServiceServer is the server API for JobPortalService service.
// All implementations must embed UnimplementedJobPortalServiceServer
// for forward compatibility
type JobPortalServiceServer interface {
	// admin specific rpc
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	RegisterCompany(context.Context, *RegisterCompanyRequest) (*RegisterCompanyResponse, error)
	DeleteCompany(context.Context, *DeleteCompanyRequest) (*DeleteCompanyResponse, error)
	// fetching company data: called by companies and users
	UpdateCompanyData(context.Context, *UpdateCompanyDataRequest) (*UpdatecompanyDataResponse, error)
	CreateNewJob(context.Context, *CreateNewJobRequest) (*CreateNewJobResponse, error)
	// to fetch job categories: companies while creating jobs, users while searching for jobs
	// if no available category is apt then create new job category
	CreateNewJobCategory(context.Context, *CreateNewJobCategoryRequest) (*CreateNewJobCategoryResponse, error)
	UpdateJobData(context.Context, *UpdateJobDataRequest) (*UpdateJobDataResponse, error)
	// fetch jobs of specific category by one company - filter by company and category
	DeleteJob(context.Context, *DeleteJobRequest) (*DeleteJobResponse, error)
	FetchApplicantsByJobID(context.Context, *FetchApplicantsByJobIDRequest) (*FetchApplicantsByJobIDResponse, error)
	// companies shortlisting/rejecting candidates
	ModifyApplicantApplication(context.Context, *ModifyApplicantApplicationRequest) (*ModifyApplicantApplicationResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	// fetching user data: can be called by companies while processing candidates, users for check/update profile
	UpdateUserData(context.Context, *UpdateUserDataRequest) (*UpdateUserDataResponse, error)
	// fetch jobs of specific category by one company - filter by company and category
	UserJobApplication(context.Context, *UserJobApplicationRequest) (*UserJobApplicationResponse, error)
	CheckAppliedJobs(context.Context, *CheckAppliedJobsRequest) (*CheckAppliedJobsResponse, error)
	UserSavedJob(context.Context, *UserSavedJobRequest) (*UserSavedJobResponse, error)
	UserCheckSavedJobs(context.Context, *UserCheckSavedJobsRequest) (*UserCheckSavedJobsResponse, error)
	UserRemoveSavedJob(context.Context, *UserRemoveSavedJobRequest) (*UserRemoveSavedJobResponse, error)
	FetchCompanyData(context.Context, *FetchCompanyDataRequest) (*FetchCompanyDataResponse, error)
	FetchUserData(context.Context, *FetchUserDataRequest) (*FetchUserDataResponse, error)
	FetchJobCategories(context.Context, *FetchJobCategoriesRequest) (*FetchJobCategoriesResponse, error)
	FetchAllJobs(context.Context, *NoParams) (*FetchAllJobsResponse, error)
	FetchJobsByCompanyID(context.Context, *FetchJobsByCompanyIDRequest) (*FetchJobsByCompanyIDResponse, error)
	FetchJobsByCategoryID(context.Context, *FetchJobsByCategoryIDRequest) (*FetchJobsByCategoryIDResponse, error)
	FetchCompanyJobsByCategory(context.Context, *FetchCompanyJobsByCategoryRequest) (*FetchCompanyJobsByCategoryResponse, error)
	FetchJobData(context.Context, *Job) (*Job, error)
	mustEmbedUnimplementedJobPortalServiceServer()
}

// UnimplementedJobPortalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJobPortalServiceServer struct {
}

func (UnimplementedJobPortalServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedJobPortalServiceServer) RegisterCompany(context.Context, *RegisterCompanyRequest) (*RegisterCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCompany not implemented")
}
func (UnimplementedJobPortalServiceServer) DeleteCompany(context.Context, *DeleteCompanyRequest) (*DeleteCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCompany not implemented")
}
func (UnimplementedJobPortalServiceServer) UpdateCompanyData(context.Context, *UpdateCompanyDataRequest) (*UpdatecompanyDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompanyData not implemented")
}
func (UnimplementedJobPortalServiceServer) CreateNewJob(context.Context, *CreateNewJobRequest) (*CreateNewJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewJob not implemented")
}
func (UnimplementedJobPortalServiceServer) CreateNewJobCategory(context.Context, *CreateNewJobCategoryRequest) (*CreateNewJobCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewJobCategory not implemented")
}
func (UnimplementedJobPortalServiceServer) UpdateJobData(context.Context, *UpdateJobDataRequest) (*UpdateJobDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobData not implemented")
}
func (UnimplementedJobPortalServiceServer) DeleteJob(context.Context, *DeleteJobRequest) (*DeleteJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJob not implemented")
}
func (UnimplementedJobPortalServiceServer) FetchApplicantsByJobID(context.Context, *FetchApplicantsByJobIDRequest) (*FetchApplicantsByJobIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchApplicantsByJobID not implemented")
}
func (UnimplementedJobPortalServiceServer) ModifyApplicantApplication(context.Context, *ModifyApplicantApplicationRequest) (*ModifyApplicantApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyApplicantApplication not implemented")
}
func (UnimplementedJobPortalServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedJobPortalServiceServer) RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedJobPortalServiceServer) UpdateUserData(context.Context, *UpdateUserDataRequest) (*UpdateUserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserData not implemented")
}
func (UnimplementedJobPortalServiceServer) UserJobApplication(context.Context, *UserJobApplicationRequest) (*UserJobApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserJobApplication not implemented")
}
func (UnimplementedJobPortalServiceServer) CheckAppliedJobs(context.Context, *CheckAppliedJobsRequest) (*CheckAppliedJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAppliedJobs not implemented")
}
func (UnimplementedJobPortalServiceServer) UserSavedJob(context.Context, *UserSavedJobRequest) (*UserSavedJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSavedJob not implemented")
}
func (UnimplementedJobPortalServiceServer) UserCheckSavedJobs(context.Context, *UserCheckSavedJobsRequest) (*UserCheckSavedJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCheckSavedJobs not implemented")
}
func (UnimplementedJobPortalServiceServer) UserRemoveSavedJob(context.Context, *UserRemoveSavedJobRequest) (*UserRemoveSavedJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRemoveSavedJob not implemented")
}
func (UnimplementedJobPortalServiceServer) FetchCompanyData(context.Context, *FetchCompanyDataRequest) (*FetchCompanyDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCompanyData not implemented")
}
func (UnimplementedJobPortalServiceServer) FetchUserData(context.Context, *FetchUserDataRequest) (*FetchUserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchUserData not implemented")
}
func (UnimplementedJobPortalServiceServer) FetchJobCategories(context.Context, *FetchJobCategoriesRequest) (*FetchJobCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchJobCategories not implemented")
}
func (UnimplementedJobPortalServiceServer) FetchAllJobs(context.Context, *NoParams) (*FetchAllJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAllJobs not implemented")
}
func (UnimplementedJobPortalServiceServer) FetchJobsByCompanyID(context.Context, *FetchJobsByCompanyIDRequest) (*FetchJobsByCompanyIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchJobsByCompanyID not implemented")
}
func (UnimplementedJobPortalServiceServer) FetchJobsByCategoryID(context.Context, *FetchJobsByCategoryIDRequest) (*FetchJobsByCategoryIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchJobsByCategoryID not implemented")
}
func (UnimplementedJobPortalServiceServer) FetchCompanyJobsByCategory(context.Context, *FetchCompanyJobsByCategoryRequest) (*FetchCompanyJobsByCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCompanyJobsByCategory not implemented")
}
func (UnimplementedJobPortalServiceServer) FetchJobData(context.Context, *Job) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchJobData not implemented")
}
func (UnimplementedJobPortalServiceServer) mustEmbedUnimplementedJobPortalServiceServer() {}

// UnsafeJobPortalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobPortalServiceServer will
// result in compilation errors.
type UnsafeJobPortalServiceServer interface {
	mustEmbedUnimplementedJobPortalServiceServer()
}

func RegisterJobPortalServiceServer(s grpc.ServiceRegistrar, srv JobPortalServiceServer) {
	s.RegisterService(&JobPortalService_ServiceDesc, srv)
}

func _JobPortalService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobPortalServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JobPortalService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobPortalServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobPortalService_RegisterCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobPortalServiceServer).RegisterCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JobPortalService/RegisterCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobPortalServiceServer).RegisterCompany(ctx, req.(*RegisterCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobPortalService_DeleteCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobPortalServiceServer).DeleteCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JobPortalService/DeleteCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobPortalServiceServer).DeleteCompany(ctx, req.(*DeleteCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobPortalService_UpdateCompanyData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompanyDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobPortalServiceServer).UpdateCompanyData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JobPortalService/UpdateCompanyData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobPortalServiceServer).UpdateCompanyData(ctx, req.(*UpdateCompanyDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobPortalService_CreateNewJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobPortalServiceServer).CreateNewJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JobPortalService/CreateNewJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobPortalServiceServer).CreateNewJob(ctx, req.(*CreateNewJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobPortalService_CreateNewJobCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewJobCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobPortalServiceServer).CreateNewJobCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JobPortalService/CreateNewJobCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobPortalServiceServer).CreateNewJobCategory(ctx, req.(*CreateNewJobCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobPortalService_UpdateJobData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobPortalServiceServer).UpdateJobData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JobPortalService/UpdateJobData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobPortalServiceServer).UpdateJobData(ctx, req.(*UpdateJobDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobPortalService_DeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobPortalServiceServer).DeleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JobPortalService/DeleteJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobPortalServiceServer).DeleteJob(ctx, req.(*DeleteJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobPortalService_FetchApplicantsByJobID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchApplicantsByJobIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobPortalServiceServer).FetchApplicantsByJobID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JobPortalService/FetchApplicantsByJobID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobPortalServiceServer).FetchApplicantsByJobID(ctx, req.(*FetchApplicantsByJobIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobPortalService_ModifyApplicantApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyApplicantApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobPortalServiceServer).ModifyApplicantApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JobPortalService/ModifyApplicantApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobPortalServiceServer).ModifyApplicantApplication(ctx, req.(*ModifyApplicantApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobPortalService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobPortalServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JobPortalService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobPortalServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobPortalService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobPortalServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JobPortalService/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobPortalServiceServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobPortalService_UpdateUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobPortalServiceServer).UpdateUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JobPortalService/UpdateUserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobPortalServiceServer).UpdateUserData(ctx, req.(*UpdateUserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobPortalService_UserJobApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserJobApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobPortalServiceServer).UserJobApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JobPortalService/UserJobApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobPortalServiceServer).UserJobApplication(ctx, req.(*UserJobApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobPortalService_CheckAppliedJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAppliedJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobPortalServiceServer).CheckAppliedJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JobPortalService/CheckAppliedJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobPortalServiceServer).CheckAppliedJobs(ctx, req.(*CheckAppliedJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobPortalService_UserSavedJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSavedJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobPortalServiceServer).UserSavedJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JobPortalService/UserSavedJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobPortalServiceServer).UserSavedJob(ctx, req.(*UserSavedJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobPortalService_UserCheckSavedJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCheckSavedJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobPortalServiceServer).UserCheckSavedJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JobPortalService/UserCheckSavedJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobPortalServiceServer).UserCheckSavedJobs(ctx, req.(*UserCheckSavedJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobPortalService_UserRemoveSavedJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRemoveSavedJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobPortalServiceServer).UserRemoveSavedJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JobPortalService/UserRemoveSavedJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobPortalServiceServer).UserRemoveSavedJob(ctx, req.(*UserRemoveSavedJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobPortalService_FetchCompanyData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchCompanyDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobPortalServiceServer).FetchCompanyData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JobPortalService/FetchCompanyData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobPortalServiceServer).FetchCompanyData(ctx, req.(*FetchCompanyDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobPortalService_FetchUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchUserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobPortalServiceServer).FetchUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JobPortalService/FetchUserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobPortalServiceServer).FetchUserData(ctx, req.(*FetchUserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobPortalService_FetchJobCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchJobCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobPortalServiceServer).FetchJobCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JobPortalService/FetchJobCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobPortalServiceServer).FetchJobCategories(ctx, req.(*FetchJobCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobPortalService_FetchAllJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobPortalServiceServer).FetchAllJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JobPortalService/FetchAllJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobPortalServiceServer).FetchAllJobs(ctx, req.(*NoParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobPortalService_FetchJobsByCompanyID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchJobsByCompanyIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobPortalServiceServer).FetchJobsByCompanyID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JobPortalService/FetchJobsByCompanyID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobPortalServiceServer).FetchJobsByCompanyID(ctx, req.(*FetchJobsByCompanyIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobPortalService_FetchJobsByCategoryID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchJobsByCategoryIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobPortalServiceServer).FetchJobsByCategoryID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JobPortalService/FetchJobsByCategoryID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobPortalServiceServer).FetchJobsByCategoryID(ctx, req.(*FetchJobsByCategoryIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobPortalService_FetchCompanyJobsByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchCompanyJobsByCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobPortalServiceServer).FetchCompanyJobsByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JobPortalService/FetchCompanyJobsByCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobPortalServiceServer).FetchCompanyJobsByCategory(ctx, req.(*FetchCompanyJobsByCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobPortalService_FetchJobData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobPortalServiceServer).FetchJobData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JobPortalService/FetchJobData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobPortalServiceServer).FetchJobData(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

// JobPortalService_ServiceDesc is the grpc.ServiceDesc for JobPortalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobPortalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.JobPortalService",
	HandlerType: (*JobPortalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _JobPortalService_Login_Handler,
		},
		{
			MethodName: "RegisterCompany",
			Handler:    _JobPortalService_RegisterCompany_Handler,
		},
		{
			MethodName: "DeleteCompany",
			Handler:    _JobPortalService_DeleteCompany_Handler,
		},
		{
			MethodName: "UpdateCompanyData",
			Handler:    _JobPortalService_UpdateCompanyData_Handler,
		},
		{
			MethodName: "CreateNewJob",
			Handler:    _JobPortalService_CreateNewJob_Handler,
		},
		{
			MethodName: "CreateNewJobCategory",
			Handler:    _JobPortalService_CreateNewJobCategory_Handler,
		},
		{
			MethodName: "UpdateJobData",
			Handler:    _JobPortalService_UpdateJobData_Handler,
		},
		{
			MethodName: "DeleteJob",
			Handler:    _JobPortalService_DeleteJob_Handler,
		},
		{
			MethodName: "FetchApplicantsByJobID",
			Handler:    _JobPortalService_FetchApplicantsByJobID_Handler,
		},
		{
			MethodName: "ModifyApplicantApplication",
			Handler:    _JobPortalService_ModifyApplicantApplication_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _JobPortalService_DeleteUser_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _JobPortalService_RegisterUser_Handler,
		},
		{
			MethodName: "UpdateUserData",
			Handler:    _JobPortalService_UpdateUserData_Handler,
		},
		{
			MethodName: "UserJobApplication",
			Handler:    _JobPortalService_UserJobApplication_Handler,
		},
		{
			MethodName: "CheckAppliedJobs",
			Handler:    _JobPortalService_CheckAppliedJobs_Handler,
		},
		{
			MethodName: "UserSavedJob",
			Handler:    _JobPortalService_UserSavedJob_Handler,
		},
		{
			MethodName: "UserCheckSavedJobs",
			Handler:    _JobPortalService_UserCheckSavedJobs_Handler,
		},
		{
			MethodName: "UserRemoveSavedJob",
			Handler:    _JobPortalService_UserRemoveSavedJob_Handler,
		},
		{
			MethodName: "FetchCompanyData",
			Handler:    _JobPortalService_FetchCompanyData_Handler,
		},
		{
			MethodName: "FetchUserData",
			Handler:    _JobPortalService_FetchUserData_Handler,
		},
		{
			MethodName: "FetchJobCategories",
			Handler:    _JobPortalService_FetchJobCategories_Handler,
		},
		{
			MethodName: "FetchAllJobs",
			Handler:    _JobPortalService_FetchAllJobs_Handler,
		},
		{
			MethodName: "FetchJobsByCompanyID",
			Handler:    _JobPortalService_FetchJobsByCompanyID_Handler,
		},
		{
			MethodName: "FetchJobsByCategoryID",
			Handler:    _JobPortalService_FetchJobsByCategoryID_Handler,
		},
		{
			MethodName: "FetchCompanyJobsByCategory",
			Handler:    _JobPortalService_FetchCompanyJobsByCategory_Handler,
		},
		{
			MethodName: "FetchJobData",
			Handler:    _JobPortalService_FetchJobData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/job-portal.proto",
}
